#include "Math.cpp"

#include <iostream>
#include <cassert>


void test_addition() {
    mpz_class num1("12345678901234567890");
    mpz_class num2("98765432109876543210");
    mpz_class result = num1 + num2;
    assert(result == mpz_class("111111111011111111100"));
    std::cout << "Addition test passed!" << std::endl;
}

void test_subtraction() {
    mpz_class num1("98765432109876543210");
    mpz_class num2("12345678901234567890");
    mpz_class result = num1 - num2;
    assert(result == mpz_class("86419753208641975320"));
    std::cout << "Subtraction test passed!" << std::endl;
}

void test_multiplication() {
    mpz_class num1("2000");
    mpz_class num2("123456789012345678901234567890");
    mpz_class result = num1 * num2;
    assert(result == mpz_class("246913578024691357802469135780000"));
    std::cout << "Multiplication test passed!" << std::endl;
}

void test_division() {
    mpz_class num1("123456789012345678901234567890");
    mpz_class num2("123456789012345678901234567890");
    mpz_class result = num1 / num2;
    assert(result == mpz_class("1"));
    std::cout << "Division test passed!" << std::endl;
}

void test_modulus() {
    mpz_class num1("123456789012345678901234567890");
    mpz_class num2("100000000000000000000000000001");
    mpz_class result = num1 % num2;
    assert(result == mpz_class("23456789012345678901234567889"));
    std::cout << "Modulus test passed!" << std::endl;
}

void test_power() {
    mpz_class base("2");
    mpz_class exp("10");
    mpz_class result = power(base,exp);
    assert(result == mpz_class("1024"));
    std::cout << "Power test passed!" << std::endl;
}

void test_power_mod(){
    mpz_class base("23");
    mpz_class exp("177233597476795254689593388232826156373186607560864666212393719955585264362872827476969104853709871693550379293975803119758773504743584246374944759334316048520183578091154366924310606826190769265997584115947840051134975214289873078449824570438206097849578983947585195383643033544741890085817777649605397985211");
    mpz_class mod("124252457532801270928909777205436002622881447491862470051212172099124863259043658010906743587438049756944365623729865916669096488172173585701320806426497570632633424153912177264881454921139830747255014406127635693235945395916612000475939214354091029064219792234244186009717353790879245677402637548349738374339");
    mpz_class result = powerMod(base,exp,mod);
    assert(result == mpz_class("112354651586496047107666984965374714957521982945208052923679413369920630615882186161888550702040199209681596163306357601114443440731385355112096446114273163100224446881650598359984054741597801994332570440103414211458988470321189651724611257776885397701116154126203813356189515632401229630067063899652308804145"));
    std::cout << "Power Mod test passed!" << std::endl;
}

void test_gcd() {
    mpz_class num1("94460530507136610698792141854649138524011706593978058099518887591992719528796262627171013572394847112217809046755956088827822094227903422577607219102754400357140343025337787892336848209128605989868292263873593656063755043023693992197967578886096638126438564192867826216629443496344556286585000577110978395711");
    mpz_class num2("359233397518640530487506515473230673806816520176898554952470329512348312368012186771131364615817603567764327804812901005812207424348716716062640254247774984558204724525359607354557033739316088579469115479511276674010460428619108252328870702503825514794845859625476343101841773616598347557882757194753050838888933");
    mpz_class result = gcd(num1, num2);
    assert(result == mpz_class("94460530507136610698792141854649138524011706593978058099518887591992719528796262627171013572394847112217809046755956088827822094227903422577607219102754400357140343025337787892336848209128605989868292263873593656063755043023693992197967578886096638126438564192867826216629443496344556286585000577110978395711"));
    std::cout << "GCD test passed!" << std::endl;
}

void test_modular_inverse() {
    mpz_class num("41803249834102384012394");
    mpz_class mod("124252457532801270928909777205436002622881447491862470051212172099124863259043658010906743587438049756944365623729865916669096488172173585701320806426497570632633424153912177264881454921139830747255014406127635693235945395916612000475939214354091029064219792234244186009717353790879245677402637548349738374339");
    mpz_class result = inverseMod(num, mod);
    assert(num*result % mod == 1);
    std::cout << "Modular inverse test passed!" << std::endl;
}


int main() {
    test_addition();
    test_subtraction();
    test_multiplication();
    test_division();
    test_modulus();
    test_power();
    test_power_mod();
    test_gcd();
    test_modular_inverse();

    return 0;
}